// Importamos la colección de restaurantes en una base de datos denominada 'alumno' a partir del fichero ubicado en la máquina virtual
mongoimport -u alumno -p alumno --db alumno --authenticationDatabase=admin --collection restaurants --type json --drop --file /var/tmp/restaurantes1.json

// Desde Robo 3T nos situamos en la base de datos anteriormente creada
use alumno

// Consulta utilizando MapReduce 
db.runCommand({
    // Colección sobre la que se pretende realizar la consulta mapReduce
    mapReduce: 'restaurants',
    // Filtramos los restaurantes por barrio, cocina y con score menor o igual que 13
    query: {borough: 'Manhattan', cuisine: 'Spanish', 'grades.score': {$lte: 13}},
    map: function MapFunction() {
        // Agrupamos por código
        let key = this.address.zipcode;
        // Proyección de los datos para mostrar la cocina, el nombre del restaurante y su dirección
        // Añadimos las coordenadas de su localización para facilitar el cálculo de la distancia entre dos restaurantes
        emit(key, {
            'data': [{
                    'cuisine': this.cuisine,
                    'name': this.name,
                    'address': this.address,
                    'coordX': this.address.coord[0],
                    'coordY': this.address.coord[1]
                }]
        });
    },
    reduce: function ReduceFunction(key, values) {
        let reducedData = {'data': []};
        // Almacena los pares de restaurantes más próximos encontrados para cada código
        for (let i in values) {
            for (let j in values[i].data) {
                reducedData.data.push(values[i].data[j]);
            }
        }
        return reducedData;
    },
    finalize: function FinalizeFunction(key, reducedData) {
        // Caso base: solo existe un restaurante en un código por lo que ese es el más próximo
        if (reducedData.data.length == 1) {
            return {
                'restaurant_1': {'cuisine': reducedData.data[0].cuisine, 'name': reducedData.data[0].name, 'address': reducedData.data[0].address},
                'minDistance': 0.0,
                'totalRestaurants': reducedData.data.length
            };
        }
        let minDistance = Number.POSITIVE_INFINITY;
        let rest1, rest2;
        // Calculamos la distancia entre cada par de restaurantes de un código
        // en busca de aquellos dos que estén más próximos
        for (let i in reducedData.data) {
            for (let j in reducedData.data) {
                if (i != j) {
                    // Cálculo de la distancia Euclídea entre dos restaurantes
                    let distance = Math.sqrt(Math.pow(reducedData.data[i].coordX - reducedData.data[j].coordX, 2) 
                                    + Math.pow(reducedData.data[i].coordY - reducedData.data[j].coordY, 2));
                    if (distance < minDistance) {
                        minDistance = distance;
                        rest1 = reducedData.data[i];
                        rest2 = reducedData.data[j];
                    }
                }
            }
        }
        // Devuelve el par de restaurantes más próximos de un código, la distancia y el número de restaurantes revisados 
        return {
            'restaurant_1': {'cuisine': rest1.cuisine, 'name': rest1.name, 'address': rest1.address},
            'restaurant_2': {'cuisine': rest2.cuisine, 'name': rest2.name, 'address': rest2.address},
            'minDistance': minDistance,
            'totalRestaurants': reducedData.data.length
        };
    },
    // Almacenamos el resultado en otra colección denominada 'rest_mapreduce'
    out: { replace: 'rest_mapreduce' }
});

// Consulta con el operador aggregate
db.runCommand({
    // Colección sobre la que aplicar la consulta utilizando el operador aggregate
    aggregate: 'restaurants',
    pipeline: [
        // Filtramos los restaurantes por barrio, cocina y un score menor o igual que 13
        {$match: {borough: 'Manhattan', cuisine: 'Spanish', 'grades.score': {$lte: 13}}},
        {$group: {
            // Agrupamos los restaurantes por código
            '_id': '$address.zipcode',
            // Añadimos los campos de proyección y cálculos para cada pareja de restaurantes 
            'rest1': {
                $push: {
                    'name': '$name',
                    'cuisine': '$cuisine',
                    'address': '$address'
                }
            },
            'rest2': {
                $push: {
                    'name': '$name',
                    'cuisine': '$cuisine',
                    'address': '$address'
                }
            }
        }},
        // Desagrega los dos vectores para crear un documento por cada restaurante 
        // con el objetivo de comenzar los cálculos
        {$unwind: '$rest1'},
        {$unwind: '$rest2'},
        // Calcula la distancia entre cada par de restaurantes disponibles por código
        {$project: {
            'zipcode': '$_id',
            'rest1': '$rest1',
            'rest2': '$rest2',
            // Cálculo de la distancia Euclídea
            'distance': {
                $sqrt: {
                    $sum: [{
                        $pow: [
                            {$subtract: [
                                {$arrayElemAt: ['$rest1.address.coord', 0]},
                                {$arrayElemAt: ['$rest2.address.coord', 0]}
                            ]}, 2
                        ]},
                        {$pow: [
                            {$subtract: [
                                {$arrayElemAt: ['$rest1.address.coord', 1]},
                                {$arrayElemAt: ['$rest2.address.coord', 1]}
                            ]}, 2
                        ]}
                    ]
                }
            }
        }},
        // Eliminamos las parejas en las que ambos miembros sean el mismo restaurante 
        {$redact: 
            {'$cond': [{'$lt': ['$rest1.name', '$rest2.name']}, '$$KEEP', '$$PRUNE']}
        },
        // Para cada código obtenemos la pareja de restaurantes con menor distancia
        // contando el número de restaurantes revisados durante la búsqueda
        {$group: {
            '_id': '$zipcode',
            'minDistance': {$min: '$distance'},            
            'restPairs': {
                $push: {
                    'rest1': '$rest1',
                    'rest2': '$rest2',
                    'distance': '$distance'
                }
            },
            'totalRestaurants': {$sum: 1}
        }},
        // Desagregamos el array de parejas de restaurantes para filtrar aquellas cuya distancia
        // coincide con la distancia mínima calculada anteriormente
        {$unwind: '$restPairs'},
        {$redact: {
            '$cond': [
                {'$eq': ['$minDistance', '$restPairs.distance']}, 
                '$$KEEP', '$$PRUNE']
            }
        },
        // Filtramos los campos a mostrar en la proyección de las parejas de restaurantes
        // más próximas por código
        {$project: {
            'zipcode': '$_id',
            'restaurant_1': '$restPairs.rest1.name',
            'restaurant_1_cuisine': '$restPairs.rest1.cuisine',
            'restaurant_1_address': '$restPairs.rest1.address',
            'restaurant_2': '$restPairs.rest2.name',
            'restaurant_2_cuisine': '$restPairs.rest2.cuisine',
            'restaurant_2_address': '$restPairs.rest2.address',
            'distance': '$minDistance',
            'totalRestaurants': '$totalRestaurants'
        }},
        // Almacena los documentos resultantes en la colección denominada 'rest_aggregate'
        {$out: 'rest_aggregate'}
    ],
    // Cursor con el tamaño por lotes por defecto
    cursor: {}
});